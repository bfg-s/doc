<?phpnamespace Bfg\Doc\Core;use Illuminate\Filesystem\Filesystem;use Illuminate\Support\Collection;/** * Class ScanDirectories * @package Bfg\Doc\Core */class ScanDirectories{    /**     * @var Collection     */    public Collection $directories;    /**     * @var array|string[]     */    static array $ignore_folder_names = [        'node_modules',        'css',        'js',    ];    /**     * @var array     */    static array $ignore_folders = [];    /**     * ScanDirectories constructor.     * @param  Filesystem  $filesystem     */    public function __construct(        protected Filesystem $filesystem    ) {        static::$ignore_folders[] = base_path('public');        static::$ignore_folders[] = base_path('vendor');        static::$ignore_folders[] = base_path('routes');        static::$ignore_folders[] = base_path('resources');        static::$ignore_folders[] = base_path('storage');        static::$ignore_folders[] = base_path('runtimes');        static::$ignore_folders[] = base_path('database');        $this->directories = $this->makeList(base_path());    }    /**     * @param  string  $dir     * @return Collection     */    protected function makeList(string $dir): Collection    {        $dirs = collect($this->filesystem->directories($dir))            ->map(fn ($i) => str_replace($dir, '', $i))            ->map(fn ($i) => trim(trim($i), '/'))            ->filter(fn($i) => !in_array($i, static::$ignore_folder_names))            ->map(fn ($i) => rtrim($dir, '/') . '/' . $i)            ->filter(fn($i) => !in_array($i, static::$ignore_folders));        foreach ($dirs as $dir) {            $dirs = $dirs->merge($this->makeList($dir));        }        return $dirs;    }}